package platforms

import (
  "context"
  "net/http"
  "fmt"
  "testing"

	"github.com/google/go-github/v34/github"
)

type mockRepositoryService struct {
  repositoryReleases []*github.RepositoryRelease
  resp *github.Response
  err error
}

func (m *mockRepositoryService) ListReleases(_ context.Context, _, _ string, _ *github.ListOptions) ([]*github.RepositoryRelease, *github.Response, error) {
  fmt.Println("called")
  return m.repositoryReleases, m.resp, m.err
}

func TestListReleases(t *testing.T) {
	t.Run("should list releases", func(t *testing.T) {

    // c := github.NewClient(&http.Client{})
    // gp := &mockClient{}
    // p.client.Repositories.ListReleases

    gp := &githubPlatform{
      client: github.NewClient(&http.Client{}),
    }
    // gp.client.Repositories.ListReleases = &mockRepositoryService{}
    // gp.client.Repositories.ListReleases = &mockRepositoryService{}
    //   // client: github.NewClient(&http.Client{}),
    //   client: &mockClient{},
    //   context: context.Background(),
    // }
    // gp.client.Repositories.ListReleases = func(_ context.Context, _, _ string, _ *github.ListOptions) ([]*github.RepositoryRelease, *github.Response, error) {
  // fmt.Println("called")
    //   return []*github.RepositoryRelease{}, nil, nil
    // }


    // releases, err := gp.ListReleases("o", "r")
    // fmt.Println(releases, err)
  })
}
