// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/platforms/platforms.go

// Package mock_platforms is a generated GoMock package.
package mock_platforms

import (
	io "io"
	reflect "reflect"

	platforms "github.com/fikaworks/ggate/pkg/platforms"
	gomock "github.com/golang/mock/gomock"
)

// MockPlatform is a mock of Platform interface.
type MockPlatform struct {
	ctrl     *gomock.Controller
	recorder *MockPlatformMockRecorder
}

// MockPlatformMockRecorder is the mock recorder for MockPlatform.
type MockPlatformMockRecorder struct {
	mock *MockPlatform
}

// NewMockPlatform creates a new mock instance.
func NewMockPlatform(ctrl *gomock.Controller) *MockPlatform {
	mock := &MockPlatform{ctrl: ctrl}
	mock.recorder = &MockPlatformMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlatform) EXPECT() *MockPlatformMockRecorder {
	return m.recorder
}

// CheckAllStatusSucceeded mocks base method.
func (m *MockPlatform) CheckAllStatusSucceeded(arg0, arg1, arg2 string, arg3 []string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAllStatusSucceeded", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAllStatusSucceeded indicates an expected call of CheckAllStatusSucceeded.
func (mr *MockPlatformMockRecorder) CheckAllStatusSucceeded(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAllStatusSucceeded", reflect.TypeOf((*MockPlatform)(nil).CheckAllStatusSucceeded), arg0, arg1, arg2, arg3)
}

// CreateStatus mocks base method.
func (m *MockPlatform) CreateStatus(arg0, arg1 string, arg2 *platforms.Status) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateStatus indicates an expected call of CreateStatus.
func (mr *MockPlatformMockRecorder) CreateStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStatus", reflect.TypeOf((*MockPlatform)(nil).CreateStatus), arg0, arg1, arg2)
}

// GetStatus mocks base method.
func (m *MockPlatform) GetStatus(arg0, arg1, arg2, arg3 string) (*platforms.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*platforms.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockPlatformMockRecorder) GetStatus(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockPlatform)(nil).GetStatus), arg0, arg1, arg2, arg3)
}

// ListReleases mocks base method.
func (m *MockPlatform) ListReleases(arg0, arg1 string) ([]*platforms.Release, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReleases", arg0, arg1)
	ret0, _ := ret[0].([]*platforms.Release)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReleases indicates an expected call of ListReleases.
func (mr *MockPlatformMockRecorder) ListReleases(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReleases", reflect.TypeOf((*MockPlatform)(nil).ListReleases), arg0, arg1)
}

// ListStatus mocks base method.
func (m *MockPlatform) ListStatus(arg0, arg1, arg2 string) ([]*platforms.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*platforms.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStatus indicates an expected call of ListStatus.
func (mr *MockPlatformMockRecorder) ListStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStatus", reflect.TypeOf((*MockPlatform)(nil).ListStatus), arg0, arg1, arg2)
}

// PublishRelease mocks base method.
func (m *MockPlatform) PublishRelease(arg0, arg1 string, arg2 int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishRelease", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishRelease indicates an expected call of PublishRelease.
func (mr *MockPlatformMockRecorder) PublishRelease(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishRelease", reflect.TypeOf((*MockPlatform)(nil).PublishRelease), arg0, arg1, arg2)
}

// ReadFile mocks base method.
func (m *MockPlatform) ReadFile(arg0, arg1, arg2 string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile.
func (mr *MockPlatformMockRecorder) ReadFile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockPlatform)(nil).ReadFile), arg0, arg1, arg2)
}
